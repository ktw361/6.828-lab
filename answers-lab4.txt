Exercise 1 & 2:
    Questions answer:
        1. Since the mpentry.S code and loaded not linked, their address will start from zero, if not using MPBOOTPHYS.

Ex 3, 4, 5:
    Question
        2. One cpu modify kernel of another cpu, e.g. another cpu's Env.

Ex 6:
    Question
        3. Because e is allocated in envs, which is static mapped to same virtual address in every page directory.
        4. Each env's associated registers are Context of that env. Saving is done by _alltraps.

Ex 7:   Done

Part B:
Ex 8, 9, 10, 11:
    In ex10 , ONLY decrement tf->tf_esp by 4 when already in EXCEPTION.
    in pfentry.S, UTrapframe's fault_va and error_code is skipped (addl $8 %esp). Magic Number $40, $8 is calculated by watch the size of PushRegs and other parameters in UTrapframe(sizeof(UTrameframe) = 52, sizeof(PushRegs) = 8*4 = 32), push trap-time eip by modifying trap-time esp using assembly language.

Ex 12:
    UVPT 真的很聪明！！！
    巧妙之处在于把PDX指向到了自身，把PTX指向了原PDX，而offset呢，刚好又和uvpt[pn]的pn*4 的后12位对应上了，而且刚好32bit宽，我佛了！。。。。
    访问pt的permission位(即va), 只需uvpt[pn];访问pd的permission位，只需upvd[pn].
    va 的 page-aligned 真的很关键！(在pgfault)

Part C:
Ex13, 14:
    Note: run with CPUS more than 1, otherwise it will no pass read_eflags() assert in trap()
    修改 trap_init (lab3), 由于JOS diable interrupt in kernel mode，SETGATE for T_SYSCALL 应该是 0，interrupt gate 而不是trap gate.
    记得要 eoi lapic 的中断

Ex 15:
    修改: check of env_status in env_run(), caller modify env_status to ENV_NOT_RUNNABLE before call to env_run();
   ipc_send loops, and yield(); ipc_recv calls sys_ipc_recv, sys__ipc_recv block by sched_yield();

Challenge "sfork()"
    thisenv was originally in program bss, now we define it in lib/entry.S, which we manually put it in the top 4 bytes of the user stack.

Challenge "Communicating Sequential Processes":
    To implement the concurrent matrix multiplication, the KEY COMPONENT is the LOCK.
    JOS doesn't have lock in user space, 所以我放弃了.

Possible solution if user mode lock is available:

#include <inc/lib.h>

#define TEMP_ADDR	((char*)0xa00000)

unsigned east(void);
unsigned west(void);
unsigned north(void);
unsigned south(void);
unsigned center(void);

void
umain(int argc, char **argv)
{
    int i, j;
    int id[5][5];

    // fork SOUTH
    i = 4;
    for (j = 1; j != 4; ++j) {
        if ((id[i][j] = fork()) == 0) {
            south();
            return;
        }
    }
    // fork CENTER
    for (i = 1; i != 4; ++i) {
        for (j = 1; j != 4; ++j) {
            if ((id[i][j] = fork()) == 0) {
                center();
                return;
            }
        }
    }
    // fork NORTH
    i = 0;
    for (j = 1; j != 4; ++j) {
        if ((id[i][j] = fork()) == 0) {
            north();
            return;
        }
    }
    // fork WEST
    j = 0;
    for (i = 1; i != 4; ++i) {
        if ((id[i][j] = fork()) == 0) {
            west();
            return;
        }
    }
    // fork EAST
    j = 4;
    for (i = 1; i != 4; ++i) {
        if ((id[i][j] = fork()) == 0) {
            east();
            return;
        }
    }

    // init locks
    for (i = 1; i != 4; ++i) {
        for (j = 1; j != 4; ++j) {
            array_lock[3*(i-1)+(j-1)] = 1;
        }
    }

    sys_page_alloc(thisenv->env_id, TEMP_ADDR, PTE_P|PTE_W|PTE_U);
    memcpy(TEMP_ADDR, array_lock, 9 * sizeof(array_lock[0]));

    // tell center
    for (i = 3; i >= 1; --i) {
        for (j = 3; j >= 1; --j) {
            /* sys_env_set_status(id[4][j], ENV_RUNNING); */
            // tell them whom to recv from
            ipc_send(id[i][j], id[i-1][j], 0, 0);
            ipc_send(id[i][j], id[i][j-1], 0, 0);
            // tell them whom to send to
            ipc_send(id[i][j], id[i+1][j], 0, 0);
            ipc_send(id[i][j], id[i][j+1], 0, 0);
            // tell them which lock to set
            ipc_send(id[i][j], 3*(i-1)+(j-1), TEMP_ADDR, PTE_P|PTE_U|PTE_W);
        }
    }
    // tell east the sender
    for (i = 1; i != 4; ++i) {
        /* sys_env_set_status(id[4][j], ENV_RUNNING); */
        ipc_send(id[i][4], id[i][3], 0, 0);
    }
    // tell south the name of center, and send page of lock
    for (j = 1; j != 4; ++j) {
        /* sys_env_set_status(id[4][j], ENV_RUNNING); */
        ipc_send(id[4][j], id[3][j], 0, 0);
    }
    // tell north, after this ,north begins to send
    for (j = 1; j != 4; ++j) {
        /* sys_env_set_status(id[4][j], ENV_RUNNING); */
        ipc_send(id[0][j], id[1][j], 0, 0);
        // tell them which lock to look at
        ipc_send(id[0][j], 3*0+(j-1), TEMP_ADDR, PTE_P|PTE_U|PTE_W);
    }
    // tell west
    for (i = 1; i != 4; ++i) {
        /* sys_env_set_status(id[4][j], ENV_RUNNING); */
        ipc_send(id[i][0], id[i][1], 0, 0);
        // tell them which lock to look at
        ipc_send(id[i][0], 3*(i-1)+0, TEMP_ADDR, PTE_P|PTE_U|PTE_W);
    }
}

unsigned
west(void)
{
    /* sys_env_set_status(thisenv->env_id, ENV_NOT_RUNNABLE); */
    /* sys_yield(); */
    int idx, x;
    envid_t to_env, envid;

    to_env = ipc_recv(&envid, 0, 0);
    idx = ipc_recv(&envid, TEMP_ADDR, 0);
    cprintf("WEST init complete\n");
    plock lk = (plock)TEMP_ADDR + idx;

    x = sys_getenvid() % 10;
    int i;
    for (i = 0; i != 5; i++) {
        sys_yield();
        if (*lk == 1) {
            ipc_send(to_env, x, 0, 0);
            cprintf("WEST: I sent x(%d)\n", x);
        }
    }
    return 0;
}

unsigned
north(void)
{
    /* sys_env_set_status(thisenv->env_id, ENV_NOT_RUNNABLE); */
    /* sys_yield(); */
    int idx, send_val = 0;
    envid_t to_env, envid;

    to_env = ipc_recv(&envid, 0, 0);
    idx = ipc_recv(&envid, TEMP_ADDR, 0);
    cprintf("NORTH init complete\n");
    plock lk = (plock)TEMP_ADDR + idx;
    while(1) {
        sys_yield();
        if (*lk== 2) {
            ipc_send(to_env, send_val, 0, 0);
            cprintf("NORTH: I sent 0(%d)\n", send_val);
        }
    }
}

unsigned
center(void)
{
    /* sys_env_set_status(thisenv->env_id, ENV_NOT_RUNNABLE); */
    /* sys_yield(); */
    int x, sum, idx;
    envid_t down, right, up, left, envid;
    up = ipc_recv(&envid, 0, 0);
    left = ipc_recv(&envid, 0, 0);
    down = ipc_recv(&envid, 0, 0);
    right = ipc_recv(&envid, 0, 0);
    idx = ipc_recv(&envid, TEMP_ADDR, 0);
    cprintf("CENTER init complete\n");

    plock lk = (plock)TEMP_ADDR + idx;

    while(1) {
        sys_yield();
        x = ipc_recv(&envid, 0, 0); // assert envid == left
        cprintf("CENTER: I got x(%d)\n", x);
        *lk = 2;
        ipc_send(right, x, 0, 0);
        sum = ipc_recv(&envid, 0, 0);
        cprintf("CENTER: I got sum(%d)\n", sum);
        int a_ij = sys_getenvid() % 10;
        ipc_send(right, a_ij * x + sum, 0, 0);
        *lk = 1;
    }
}

unsigned
south(void)
{
    /* sys_env_set_status(thisenv->env_id, ENV_NOT_RUNNABLE); */
    /* sys_yield(); */
    int sum;
    envid_t envid, from;
    from = ipc_recv(&envid, 0, 0);
    cprintf("SOUTH init complete\n");
    while(1) {
        sum = ipc_recv(&envid, 0, 0);
        cprintf("[%x]Sum: %d\n", sys_getenvid(), sum);
        // assert(envid == from)
    }
}

unsigned
east(void)
{
    /* sys_env_set_status(thisenv->env_id, ENV_NOT_RUNNABLE); */
    /* sys_yield(); */
    int x;
    envid_t envid, from;
    from = ipc_recv(&envid, 0, 0);
    cprintf("EAST init complete\n");
    while(1) {
        sys_yield();
        x = ipc_recv(&envid, 0, 0);
        cprintf("EASE: I got x(%d)\n", x);
        // assert(envid == from)
    }
}

